- hosts: fedora_desktops
  become: true
  become_user: root
  tasks:
    - name: upgrade all packages
      raw: /usr/bin/dnf -y upgrade

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      command: needs-restarting -r
      ignore_errors: yes

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.rc == 1

- hosts: pikvms
  become: true
  become_user: root
  gather_facts: no
  pre_tasks:
    - name: read/write
      raw: ansible pikvms -m raw -a "mount -o remount,rw /" -b #--vault-password-file=vault.txt
      delegate_to: localhost
  tasks:
    - name: upgrade all packages
      raw: pikvm-update
    - name: read only
      raw: mount -o remount,ro /

- hosts: servers:!piservers_legacy
  become: true
  become_user: root
  tasks:
    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all packages on servers
      apt: upgrade=dist force_apt_get=yes

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_checksum=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

- hosts: piservers_legacy
  become: true
  become_user: root
  vars:
    ansible_python_interpreter: "/usr/local/bin/python3.8"

  tasks:
    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
        #vars:
        #ansible_python_interpreter: "/usr/bin/python3.7"

    - name: Upgrade all packages on servers
      apt: upgrade=dist force_apt_get=yes
      vars:
        ansible_python_interpreter: "/usr/bin/python3.7"

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_checksum=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

## - hosts: pikvms
##   become: true
##   pre_tasks:
##     - name: switch to rw mode
##       ansible.builtin.command: rw
## 
##   tasks:
##     - name: Upgrade system
##       community.general.pacman:
##         update_cache: true
##         upgrade: true
##     # - name: Check if reboot is needed
##     #   ansible.builtin.stat:
##     #     path: /var/run/reboot-required
##     #     register: reboot_required
##     - name: Reboot
##       ansible.builtin.reboot:
##       # when: reboot_required.stat.exists
##     # - name: Clear package cache (optional)
##     #   ansible.builtin.file:
##     #     path: /var/cache/pacman/pkg 
##     #     state: absent
## 
##   post_tasks:
##     - name: switch back to ro mode
##       ansible.builtin.command: ro

# REFs:
# - https://www.cyberciti.biz/faq/ansible-apt-update-all-packages-on-ubuntu-debian-linux/
# - https://www.unixsysadmin.com/ansible-patch-reboot/
# - https://stackoverflow.com/questions/45154783/how-can-i-use-ansible-when-i-only-have-read-only-access
